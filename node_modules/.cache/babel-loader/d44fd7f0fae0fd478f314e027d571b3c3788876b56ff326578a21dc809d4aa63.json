{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsinghmehra/Downloads/taiyo-ai/src/Components/ChartComponent.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface ChartProps {\n//   chartData: ChartData;\n// }\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst ChartComponent = _ref => {\n  _s();\n  let {\n    activeCases,\n    recoveredCases,\n    deathCases\n  } = _ref;\n  const data = {\n    labels: [\"Active Cases\", \"Recovered Cases\", \"Deaths Cases\"],\n    datasets: [{\n      label: \"COVID-19 Cases in India\",\n      data: [activeCases, recoveredCases, deathCases],\n      backgroundColor: [\"#ff6384\", \"#36a2eb\", \"#cc65fe\"],\n      hoverBackgroundColor: [\"#ff6384\", \"#36a2eb\", \"#cc65fe\"]\n    }]\n  };\n  const d = new Date();\n  let m = monthNames[d.getMonth()];\n  const [chartData, setChartData] = React.useState({\n    labels: [\"March\"],\n    datasets: [{\n      label: \"Active Cases\",\n      data: [activeCases],\n      backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n      borderColor: \"rgba(255,99,132,1)\",\n      borderWidth: 1,\n      fill: false\n    }, {\n      label: \"Recovered Cases\",\n      data: [recoveredCases],\n      backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n      borderColor: \"rgba(54, 162, 235, 1)\",\n      borderWidth: 1,\n      fill: false\n    }, {\n      label: \"Deaths Cases\",\n      data: [deathCases],\n      backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n      borderColor: \"rgba(255, 206, 86, 1)\",\n      borderWidth: 1,\n      fill: false\n    }]\n  });\n  React.useEffect(() => {\n    const ctx = document.getElementById(\"myChart\");\n    const myChart = new Chart(ctx, {\n      type: \"bar\",\n      data: chartData\n    });\n    return () => {\n      myChart.destroy();\n    };\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"myChart\",\n    width: 400,\n    height: 400\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartComponent, \"Bis6lnINhmmfaNQywi9RrZGT0hQ=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","monthNames","ChartComponent","_ref","_s","activeCases","recoveredCases","deathCases","data","labels","datasets","label","backgroundColor","hoverBackgroundColor","d","Date","m","getMonth","chartData","setChartData","useState","borderColor","borderWidth","fill","useEffect","ctx","document","getElementById","myChart","type","destroy","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gauravsinghmehra/Downloads/taiyo-ai/src/Components/ChartComponent.tsx"],"sourcesContent":["import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Chart, { ChartData } from \"chart.js/auto\";\n\ninterface ChartProps {\n  activeCases: number;\n  recoveredCases: number;\n  deathCases: number;\n}\n\ninterface ChartDataInterface {\n  labels: string[];\n  datasets: {\n    label: string;\n    data: number[];\n    backgroundColor: string;\n    borderColor: string;\n    borderWidth: number;\n    fill: boolean;\n  }[];\n}\n\n// interface ChartProps {\n//   chartData: ChartData;\n// }\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst ChartComponent: React.FC<ChartProps> = ({\n  activeCases,\n  recoveredCases,\n  deathCases,\n}) => {\n  const data = {\n    labels: [\"Active Cases\", \"Recovered Cases\", \"Deaths Cases\"],\n    datasets: [\n      {\n        label: \"COVID-19 Cases in India\",\n        data: [activeCases, recoveredCases, deathCases],\n        backgroundColor: [\"#ff6384\", \"#36a2eb\", \"#cc65fe\"],\n        hoverBackgroundColor: [\"#ff6384\", \"#36a2eb\", \"#cc65fe\"],\n      },\n    ],\n  };\n  const d = new Date();\n  let m = monthNames[d.getMonth()];\n  const [chartData, setChartData] = React.useState<ChartDataInterface>({\n    labels: [\"March\"],\n    datasets: [\n      {\n        label: \"Active Cases\",\n        data: [activeCases],\n        backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n        borderColor: \"rgba(255,99,132,1)\",\n        borderWidth: 1,\n        fill: false,\n      },\n      {\n        label: \"Recovered Cases\",\n        data: [recoveredCases],\n        backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n        borderColor: \"rgba(54, 162, 235, 1)\",\n        borderWidth: 1,\n        fill: false,\n      },\n      {\n        label: \"Deaths Cases\",\n        data: [deathCases],\n        backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n        borderColor: \"rgba(255, 206, 86, 1)\",\n        borderWidth: 1,\n        fill: false,\n      },\n    ],\n  });\n\n  React.useEffect(() => {\n    const ctx = document.getElementById(\"myChart\") as HTMLCanvasElement;\n    const myChart = new Chart(ctx, {\n      type: \"bar\",\n      data: chartData,\n    });\n    return () => {\n      myChart.destroy();\n    };\n  }, [chartData]);\n\n  return <canvas id=\"myChart\" width={400} height={400} />;\n};\n\nexport default ChartComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK,MAAqB,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoBjD;AACA;AACA;AACA,MAAMC,UAAU,GAAG,CACjB,SAAS,EACT,UAAU,EACV,OAAO,EACP,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,QAAQ,EACR,WAAW,EACX,SAAS,EACT,UAAU,EACV,UAAU,CACX;AAED,MAAMC,cAAoC,GAAGC,IAAA,IAIvC;EAAAC,EAAA;EAAA,IAJwC;IAC5CC,WAAW;IACXC,cAAc;IACdC;EACF,CAAC,GAAAJ,IAAA;EACC,MAAMK,IAAI,GAAG;IACXC,MAAM,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,cAAc,CAAC;IAC3DC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,yBAAyB;MAChCH,IAAI,EAAE,CAACH,WAAW,EAAEC,cAAc,EAAEC,UAAU,CAAC;MAC/CK,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MAClDC,oBAAoB,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS;IACxD,CAAC;EAEL,CAAC;EACD,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC;EACpB,IAAIC,CAAC,GAAGf,UAAU,CAACa,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,KAAK,CAACuB,QAAQ,CAAqB;IACnEX,MAAM,EAAE,CAAC,OAAO,CAAC;IACjBC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,cAAc;MACrBH,IAAI,EAAE,CAACH,WAAW,CAAC;MACnBO,eAAe,EAAE,yBAAyB;MAC1CS,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,EACD;MACEZ,KAAK,EAAE,iBAAiB;MACxBH,IAAI,EAAE,CAACF,cAAc,CAAC;MACtBM,eAAe,EAAE,yBAAyB;MAC1CS,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,EACD;MACEZ,KAAK,EAAE,cAAc;MACrBH,IAAI,EAAE,CAACD,UAAU,CAAC;MAClBK,eAAe,EAAE,yBAAyB;MAC1CS,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC,CAAC;EAEF1B,KAAK,CAAC2B,SAAS,CAAC,MAAM;IACpB,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAsB;IACnE,MAAMC,OAAO,GAAG,IAAI9B,KAAK,CAAC2B,GAAG,EAAE;MAC7BI,IAAI,EAAE,KAAK;MACXrB,IAAI,EAAEU;IACR,CAAC,CAAC;IACF,OAAO,MAAM;MACXU,OAAO,CAACE,OAAO,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAACZ,SAAS,CAAC,CAAC;EAEf,oBAAOlB,OAAA;IAAQ+B,EAAE,EAAC,SAAS;IAACC,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzD,CAAC;AAACjC,EAAA,CA5DIF,cAAoC;AAAAoC,EAAA,GAApCpC,cAAoC;AA8D1C,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}